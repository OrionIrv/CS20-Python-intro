##############
#Turtle - Collect It Game
#Orion Irving
#April 19, 2024
#
#Task: To create a simple game where the player controls a turtle that can move left and right while trying to collect falling items.
##############

#####Setup#####
#Use this section to organize global data

#Import Libraries
import turtle as t
import random

#Global Variable
player = t.Turtle(shape="turtle")
player.color("white")
screen = t.Screen()
screen.setup(700, 900)
line_1 = t.Turtle(visible=False)
line_2 = t.Turtle(visible=False)
score = 00
lives = 5


    
#Lists


#####Functions#####
def make_lines():
    line_1.speed(0)
    line_2.speed(0)
    line_1.penup()
    line_1.goto(250,500)
    line_2.penup()
    line_2.goto(-250,500)
    line_1.pendown()
    line_2.pendown()
    line_1.goto(250,-360)
    line_2.goto(-250,-360)
    line_1.penup()
    line_2.penup()

##Core Game Functions##
#Create Score
#Create the score field on the top of the screen
def setup_score():#And lives
    line_2.goto(-270,-370)
    line_2.write(score)
    line_1.goto(270,-370)
    line_1.write(lives)
    
    

def create_player():
    player.goto(0,-350)
    player.color("black")
    player.penup()
    player.speed(10)

#Move Player Left
#Move player left in response to arrow key
def move_left():
    player.setheading(180)
    player.fd(10)
    check_horizontal_bounds()
    

#Move Player Right
#Move player right in response to arrow key
def move_right():
    player.setheading(0)
    player.fd(10)
    check_horizontal_bounds()

#Check Player Screen Bounds (Horizontal)
#Check to see if the player is within the vertical bounds, if not set the player to the bound
def check_horizontal_bounds():
    if player.xcor() <=-250:
        player.speed(0)
        player.goto(249,-350)
        player.speed(10)
    elif player.xcor() >= 250:
        player.speed(0)
        player.goto(-249,-350)
        player.speed(10)

#Create Collectable
#Use a for loop to create and store your collectables into a list
def create_collectables():
    pass

#Move Collectable 
#Go through your list of collectables and move each item
def move_collectable():
    pass

#Check Collectable Screen Bounds (Vertical)
#Check to see if a falling item is below vertical bounds, if so move back to the top
#Must pass the item in as an arguement
def check_vertical_bounds(item):
    pass

#Check Player Catch Collectable
#Pass in a collectable item from a list and determine if it is in contact/proximity with the player
#Must pass the item in as an arguement
def check_collectable(item):
    pass

#Update Score
#If contact between collectable and player is made, update global score
def update_score(points):
    pass

##Extendable Functions##

#Intro Screen
def start_screen():
    pass

#Life Tracker
def update_lives():
    pass

#Game Over Screen
def game_over():
    pass


#####Setup Function Calls#####
#Use this section to call any core functions that are only called once and help to setup the turtle/game environment
make_lines()
setup_score()
create_player()
screen.onkey(move_left, 'a')
screen.onkey(move_right, 'd')

screen.listen()


#####Core Game Loop#####
#Use this while loop to create your game loop, define logic and call above functions
#while True:
   # pass
